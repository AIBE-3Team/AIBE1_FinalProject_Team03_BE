name: Backend CI Pipeline

on:
  push:
    branches:
      - dev # dev 브랜치에 푸시될 때 실행
      - main    # main 브랜치에 푸시될 때 실행 (release 후 merge 시)
  pull_request:
    branches:
      - dev # dev 브랜치로 PR 생성/업데이트 시 실행

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis-cache: # Redis 서비스
        image: redis:7.0-alpine # 사용할 Docker 이미지 (로컬과 동일하게 7.0-alpine 추천)
        options: >- # 헬스체크 및 추가 옵션 (Redis가 준비될 때까지 기다림)
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 5

      localstack: # LocalStack 서비스 (SQS, S3 등 AWS 서비스 모킹)
        image: localstack/localstack:latest
        ports:
          - 4566:4566 # LocalStack 기본 포트
        env: # LocalStack 컨테이너 내부에 필요한 환경 변수
          SERVICES: sqs,s3 # 필요한 AWS 서비스만 지정 (예: SQS, S3)
          AWS_DEFAULT_REGION: ap-northeast-2
        options: >- # 헬스체크 (LocalStack이 준비될 때까지 기다림)
          --health-cmd "awslocal sqs list-queues"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Configure Redis for CI # Redis 호스트 및 포트 설정 (CI 환경 내에서)
        run: |
          echo "SPRING_DATA_REDIS_HOST=redis-cache" >> $GITHUB_ENV # 서비스 이름을 호스트로 사용
          echo "SPRING_DATA_REDIS_PORT=6379" >> $GITHUB_ENV # Redis 컨테이너의 포트

      - name: Configure LocalStack for CI # LocalStack 환경 변수 설정
        run: |
          echo "SQS_ENDPOINT=http://localstack:4566" >> $GITHUB_ENV # 서비스 이름을 호스트로 사용
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> $GITHUB_ENV # Secrets에서 주입
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> $GITHUB_ENV # Secrets에서 주입

      - name: Configure GitHub Packages for Gradle  # GH_PACKAGES 환경변수 설정
        run: |
          echo "GH_PACKAGES_USER=${{ secrets.GH_PACKAGES_USER }}" >> $GITHUB_ENV
          echo "::add-mask::${{ secrets.GH_PACKAGES_TOKEN }}" # <-- 토큰 마스킹 추가
          echo "GH_PACKAGES_TOKEN=${{ secrets.GH_PACKAGES_TOKEN }}" >> $GITHUB_ENV

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test/