app:
  max-active-users: 5 # 예매 페이지에 동시 진입 가능한 최대 사용자 수
  access-key-ttl-minutes: 1 # 예매 페이지 접근 키의 유효시간 (단위: 분)
    # ✅ 새로 추가: 스케줄러 관련 설정 - [좌석 관리 및 예매 모듈]
  scheduler:
    # 좌석 동기화 스케줄러 설정
    seat-sync:
      enabled: true          # 좌석 동기화 스케줄러 활성화
      interval-minutes: 30   # 실행 주기 (분) - 현재는 cron으로 설정되어 있음
      lock-wait-seconds: 5   # 분산 락 획득 대기 시간
      lock-lease-seconds: 1800  # 분산 락 유지 시간 (30분)
      emergency-enabled: true   # 긴급 동기화 기능 활성화
    seat-cache-warmup:
      enabled: true          # 좌석 캐시 Warm-up 스케줄러 활성화
      interval-minutes: 5    # 실행 주기 (분)
      warmup-minutes-before: 10  # 예매 시작 몇 분 전에 캐시 초기화할지
      lock-wait-seconds: 30  # 분산 락 획득 대기 시간
      lock-lease-seconds: 300  # 분산 락 유지 시간
    waiting-queue:
      enabled: true          # 대기열 스케줄러 활성화 (기존)
      interval-seconds: 10   # 실행 주기 (초)

spring:
  application:
    name: ticketmon-go
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}  # 환경 변수 'SPRING_PROFILES_ACTIVE' 값(.env) 사용, 없으면 'dev'를 기본값으로 설정
    # 로컬 개발 시 'dev' 프로필이 기본으로 활성화됩니다. 배포 시에도 변경 X -> .env에서 SPRING_PROFILES_ACTIVE를 prod로 변경
    include: supabase # 'supabase' 관련 빈(StorageUploader, StorageClient)을 활성화된 프로필과 함께 로드
  config:
    import: optional:application-${spring.profiles.active}.yml # 활성화된 프로필에 맞는 추가 설정 파일 로드

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration  # 임시로 DB 자동 설정 제외 (설정이 없을 경우 에러 방지)
    # 실제 DB 사용 시엔 위 라인 제거. 현재는 데이터소스 수동 설정을 의미

  jackson:
    time-zone: Asia/Seoul  # [기본 설정] 한국 사용자 대상이므로 KST 기준으로 기본 직렬화 설정함
    # 추후 글로벌 확장 시 UTC 또는 타임존 동적 처리로 대체 가능

  servlet:
    multipart:
      max-file-size: 11MB  # 단일 파일 최대 크기
      max-request-size: 11MB # 요청 전체의 최대 크기 (일반적으로 동일하게 설정)

    # ✅ 새로 추가: 스케줄러 설정 - [좌석 관리 및 예매 모듈]
  task:
    scheduling:
      enabled: true  # 스케줄러 활성화 (기본값: true)
      pool:
        size: 10     # 스케줄러 스레드 풀 크기
      thread-name-prefix: "ticket-scheduler-"  # 스레드 이름 접두사
    execution:
      pool:
        core-size: 8      # 비동기 작업 스레드 풀 코어 크기
        max-size: 20      # 비동기 작업 스레드 풀 최대 크기
        queue-capacity: 500  # 대기 큐 크기

server:
  port: ${SERVER_PORT:8080}  # .env에서 설정한 포트 사용, 기본은 8080

logging:
  level:
    root: ${LOG_LEVEL:INFO}  # 로그 레벨 설정 (INFO / WARN / ERROR)
    com.team03.ticketmon.seat.service.SeatSyncService: DEBUG
    com.team03.ticketmon.seat.scheduler.SeatSyncScheduler: INFO
    com.team03.ticketmon.seat.controller.SeatSyncController: INFO

toss:
  api:
    url: https://api.tosspayments.com/v1/payments/ # 토스페이먼츠 API의 기본 경로
    confirm-url: ${toss.api.url}confirm # 결제 승인 API 엔드포인트 (${toss.api.url} 재사용)

ai:
  together:
    api-key: ${AI_API_KEY}
    api-url: "https://api.together.xyz/v1/chat/completions"
    model: "meta-llama/Llama-3.3-70B-Instruct-Turbo-Free"
    timeout-seconds: 30
    max-retries: 3
    max-tokens-per-request: 100000
    max-reviews-per-request: 50
    chars-per-token: 2.5
    token-safety-margin: 0.2

  summary:
    condition:
      min-review-count: 10
      significant-count-change: 3
      significant-count-change-ratio: 0.2
      update-on-any-content-change: true
      max-update-interval-hours: 168